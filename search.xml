<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MacOS/Ubuntu 18.10 安装PyTorch</title>
      <link href="/2019/03/30/computer_science/computer_basic/PyTorch_for_Linux/"/>
      <url>/2019/03/30/computer_science/computer_basic/PyTorch_for_Linux/</url>
      
        <content type="html"><![CDATA[<p>MacOS/Ubuntu 18.10 安装PyTorch</p><a id="more"></a><hr><h2 id="1-MacOS-Ubuntu-18-10-安装Conda管理环境"><a href="#1-MacOS-Ubuntu-18-10-安装Conda管理环境" class="headerlink" title="1. MacOS/Ubuntu 18.10 安装Conda管理环境"></a>1. MacOS/Ubuntu 18.10 安装Conda管理环境</h2><p>MacOS下前往Anaconda官网下载安装即可<br>Linux下，从官网下载的是一个.sh文件，下载后终端执行zsh xxxx.sh并根据指示安装即可.<br>如果安装后使用zsh启动conda显示找不到conda，可以在.zshrc文件中添加<em>export PATH=”/home/user_name/anaconda3/bin:$PATH”</em>并source一下即可</p><hr><h2 id="2-MacOS-Ubuntu-18中安装PyTorch"><a href="#2-MacOS-Ubuntu-18中安装PyTorch" class="headerlink" title="2. MacOS/Ubuntu 18中安装PyTorch"></a>2. MacOS/Ubuntu 18中安装PyTorch</h2><ol><li>(可选) 为了避免各种软件的版本冲突问题，推荐使用python虚拟环境，在虚拟环境中安装pytorch</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n environment_name python=X.X (2.7/3.6)   # 创建虚拟环境</span><br><span class="line">conda info --env    # 显示所有的conda虚拟环境</span><br><span class="line">conda activate environment_name # 激活虚拟环境</span><br></pre></td></tr></table></figure><ol start="2"><li>修改安装镜像源并安装PyTorch，由于国外的conda源安装速度很慢，因此建议改为清华源</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># for Anaconda</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line"></span><br><span class="line"># for PyTroch</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line"></span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><ol start="3"><li>安装PyTorch</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision</span><br><span class="line">conda deactivate    # 使用结束后退出虚拟环境</span><br></pre></td></tr></table></figure><hr><h2 id="3-虚拟环境中安装jupyter"><a href="#3-虚拟环境中安装jupyter" class="headerlink" title="3. 虚拟环境中安装jupyter"></a>3. 虚拟环境中安装jupyter</h2><p>如果是新建的虚拟环境，即使你之前已经安装了anaconda，也有可能需要重新在虚拟环境中重新安装jupyter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install jupyter</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
          <category> Computer Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> PyTorch </tag>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Queue</title>
      <link href="/2019/03/04/computer_science/data_structure/Queue/"/>
      <url>/2019/03/04/computer_science/data_structure/Queue/</url>
      
        <content type="html"><![CDATA[<p>A note to queue</p><hr><a id="more"></a><h2 id="1-循环队列"><a href="#1-循环队列" class="headerlink" title="1. 循环队列"></a>1. 循环队列</h2><ol><li>计算大小为n的循环队列中元素的个数</li></ol><center>$(rear - front + n) % n$</center> <center>$(rear - front + n + 1) % n$</center><ol start="2"><li>循环队列判空</li></ol><center>$front = rear$</center><ol start="3"><li>循环队列判满</li></ol><center>$(rear + 1) % n = front $</center><ol start="4"><li>出队后头指针front的值</li></ol><center>$ front = (front + 1) % m $</center>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 18.10安装LLVM</title>
      <link href="/2018/12/30/computer_science/computer_basic/LLVM_for_Ubuntu/"/>
      <url>/2018/12/30/computer_science/computer_basic/LLVM_for_Ubuntu/</url>
      
        <content type="html"><![CDATA[<p>因为课题需要使用LLVM，因此在Ubuntu上安装了LLVM 8.0 Debug版本</p><hr><a id="more"></a><h2 id="1-安装cmake"><a href="#1-安装cmake" class="headerlink" title="1.安装cmake"></a>1.安装cmake</h2><p>安装LLVM需要使用cmake，可以使用如下命令安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cmake</span><br></pre></td></tr></table></figure><h2 id="2-修改swap分区-可选，不推荐"><a href="#2-修改swap分区-可选，不推荐" class="headerlink" title="2.修改swap分区(可选，不推荐)"></a>2.修改swap分区(可选，不推荐)</h2><p>从源码安装LLVM Debug版本时，链接过程会占用大量内存，因此可以尝试使用修改sawp分区加快安装进程。步骤如下：</p><ol><li>查看系统中已有的交换空间,如果没有条目或swap为0则说明没有可用交换空间:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo swapon --show</span><br><span class="line">or</span><br><span class="line">free -h</span><br></pre></td></tr></table></figure><ol start="2"><li>检查磁盘使用情况,一般/dev下的设备是我们的磁盘，swap分区应小于此值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><ol start="3"><li>在根目录(/)下创建名为swapfile的swap文件， 一般我们使用fallocate命令， 建议将swap分区设为20G以满足安装LLVM需求。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo swapoff -a     # 先关闭所有的swap分区，否则可能因为系统中存在swap分区而报错fallocate: fallocate failed: Text file busy，</span><br><span class="line">sudo fallocate -l 20G /swapfile     # 创建swapfile</span><br><span class="line">ls -lh /swapfile    # 验证是否成功创建swapfile，</span><br></pre></td></tr></table></figure><p>　　如果显示<em>-rw——1 root root 20G 日期 /swapfile</em> 则表示创建成功</p><ol start="4"><li>启用交换文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 600 /swapfile    # 锁定swapfile权限</span><br><span class="line">sudo mkswap /swapfile       # 将文件标记为交换空间</span><br></pre></td></tr></table></figure><p>　　若显示:<em>Setting up swapspace……</em> 则表示成功标记swapfile，标记之后启用该文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo swapon /swapfile   # 启用</span><br><span class="line">free -h                 # 验证</span><br></pre></td></tr></table></figure><ol start="5"><li>永久保留swap文件：虽然我们更改了swap分区，但是重启后不会保留设置，因此可以将将swap文件添加到/etc/fstab来将其永久保留</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/fstab /etc/fstab.bak   # 备份</span><br><span class="line">echo &apos;/swapfile none swap sw 0 0&apos; | sudo tee -a /etc/fstab  # 将swap文件信息添加到/etc/fstab文件</span><br></pre></td></tr></table></figure><hr><h2 id="3-安装LLVM-8-0-Debug版本"><a href="#3-安装LLVM-8-0-Debug版本" class="headerlink" title="3.安装LLVM-8.0 Debug版本"></a>3.安装LLVM-8.0 Debug版本</h2><ol><li>首先去<a href="http://releases.llvm.org/download.html#8.0.0" target="_blank" rel="noopener">LLVM官网</a>下载必要的软件包;</li><li>获取源码:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 在适当位置放置LLVM源码，此处放在home下</span><br><span class="line">cd ~</span><br><span class="line">mkdir tmp</span><br><span class="line"></span><br><span class="line"># 解压LLVM源码</span><br><span class="line">cd tmp</span><br><span class="line">tar -Jxvg llvm-7.0.0.src.tar.xz</span><br><span class="line">mv llvm-7.0.0.src llvm</span><br><span class="line"></span><br><span class="line"># 解压clang源码(此时在tmp目录下)</span><br><span class="line">cd llvm/tools</span><br><span class="line">tar -Jxvg cfe-7.0.0.src.tar.xz</span><br><span class="line">mv cfe-7.0.0.src clang</span><br><span class="line"></span><br><span class="line"># 解压clang-tools-extra源码(此时在tmp/llvm/tools目录下)</span><br><span class="line">cd clang/tools</span><br><span class="line">tar -Jxvg clang-tools-extra-7.0.0.src.tar.xz</span><br><span class="line">mv clang-tools-extra-7.0.0.src extra</span><br><span class="line"></span><br><span class="line"># 解压compiler-rt源码(此时在tmp/llvm/tools/clang/tools目录下)</span><br><span class="line">cd ~/tmp/llvm/projects</span><br><span class="line">tar -Jxvg compiler-rt-7.0.0.src.tar.xz</span><br><span class="line">mv compiler-rt-7.0.0.src compiler-rt</span><br></pre></td></tr></table></figure><ol start="3"><li>开始安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 在tmp目录下新建build文件夹</span><br><span class="line">cd build</span><br><span class="line">cmake -G &quot;Unix Makefiles&quot; -DCMAKE_BUILD_TYPE=Debug ../llvm</span><br><span class="line">make -j2 # 使用两个CPU核安装，该步骤既慢且卡，推荐设置为核心数一半</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"># 将路径添加到环境变量中</span><br><span class="line">cd ~</span><br><span class="line">vim .bashrc</span><br><span class="line">export PATH=/usr/lib/llvm-7/bin</span><br><span class="line">export LD_LIBRARY_PATH=/usr/lib/llvm-7/lib</span><br><span class="line">source .bashrc</span><br></pre></td></tr></table></figure><ol start="4"><li>重启终端并测试</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clang -v</span><br><span class="line">clang++ -v</span><br><span class="line">clang test.c</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
          <category> Computer Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLVM </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 18.10安装与配置</title>
      <link href="/2017/06/04/computer_science/computer_basic/install_ubuntu/"/>
      <url>/2017/06/04/computer_science/computer_basic/install_ubuntu/</url>
      
        <content type="html"><![CDATA[<p>Ubuntu 18.10安装与配置</p><a id="more"></a><hr><h2 id="1-安装Ubuntu-18-10"><a href="#1-安装Ubuntu-18-10" class="headerlink" title="1. 安装Ubuntu 18.10"></a>1. 安装Ubuntu 18.10</h2><p>安装过程不多说，安装镜像可以去<a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">中科大镜像</a>下载。</p><hr><h2 id="2-安装搜狗输入法"><a href="#2-安装搜狗输入法" class="headerlink" title="2. 安装搜狗输入法"></a>2. 安装搜狗输入法</h2><ol><li>前往<a href="https://pinyin.sogou.com/linux/?r=pinyin" target="_blank" rel="noopener">搜狗输入法官网</a>下载deb安装文件，双击安装；</li><li>前往Settings ➜ Region &amp; Language ➜ Nanage Installed Languages， 将键盘输入系统改为fcixt；</li><li>当前帐号注销并重新登入，打开应用菜单找到Fcitx Config Tool， 点击右下角的+，取消选定“只展示当前语言”，搜索”sogou”找到并添加搜狗输入法；</li><li>重启系统。</li></ol><hr><h2 id="3-修改软件源"><a href="#3-修改软件源" class="headerlink" title="3. 修改软件源"></a>3. 修改软件源</h2><p>应用菜单 ➜ Software &amp; Updates ➜ Download from ➜ Other ➜ China ➜ mirrors.ustc.edu.cn</p><hr><h2 id="4-安装Chrome"><a href="#4-安装Chrome" class="headerlink" title="4. 安装Chrome"></a>4. 安装Chrome</h2><p>前往<a href="https://www.google.cn/intl/zh-CN_ALL/chrome/" target="_blank" rel="noopener">Chrome官网</a>下载.deb安装包，双击安装即可。</p><hr><h2 id="5-开启夜览模式"><a href="#5-开启夜览模式" class="headerlink" title="5. 开启夜览模式"></a>5. 开启夜览模式</h2><p>夜览可以在Setting ➜ Device ➜ Night Light开启，但是默认的暖度过高，需要调整：</p><ol><li>打开Terminal安装dconf-editor</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install dconf-editor</span><br></pre></td></tr></table></figure><ol start="2"><li>在终端打开dconf-editor</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dconf-editor</span><br></pre></td></tr></table></figure><ol start="3"><li>dconf-editor ➜ org ➜ gnome ➜ setting-deamon ➜ plugins ➜ color ➜ night-light-temperature</li><li>关闭”Use default value”，并将温度值调到合适的值，一般5500比较合适</li></ol><hr><h2 id="6-系统美化"><a href="#6-系统美化" class="headerlink" title="6. 系统美化"></a>6. 系统美化</h2><p>安装Tweaks工具用以配置桌面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update </span><br><span class="line">sudo apt install gnome-tweak-tool</span><br></pre></td></tr></table></figure><p>在应用菜单中打开Tweaks，在Window Titlebars中可以将窗口按钮调至左侧，在Tweaks ➜ Desktop中可以将桌面上令人捉急的Trash图标抹去。默认情况下无法通过Tweaks修改Shell外观，因此需要安装扩展，打开应用中心，找到Add-ons ➜ Shell Extension ➜ User Themes ➜ 安装。推荐的扩展还有：</p><ul><li>Weather In The Clock，点击屏幕上方的时间可以展示天气;</li><li>Dash to Dock，将Ubuntu原生应用栏变得和MacOS一样，不过默认的会自动隐藏，因此需要到应用中心中该扩展的设置里关闭autohide Hide Top Bar，自动隐藏顶部栏；</li></ul><hr><h2 id="7-配置终端"><a href="#7-配置终端" class="headerlink" title="7. 配置终端"></a>7. 配置终端</h2><ol><li>安装zsh与git</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh </span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><ol start="2"><li>安装oh-my-zsh</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure><ol start="3"><li>将Shell切换到zsh，登出并重新登入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><ol start="4"><li>在Home下的.zshrc文件中可以更换主题，个人比较喜欢ys主题</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;ys&quot;</span><br></pre></td></tr></table></figure><ol start="5"><li>安装一些强大的zsh插件<br>首当其冲的插件就是incr，一个超级强大的自动补全插件，下载该插件到Home目录下的/.oh-my-zsh/plugins/incr下，在.zshrc文件中添加命令：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.oh-my-zsh/plugins/incr/incr*.zsh</span><br></pre></td></tr></table></figure><ol start="6"><li>同时还推荐一些其他的插件，例如extract，在plugins=()语句括号中添加extract即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
          <category> Computer Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction To Data Structure</title>
      <link href="/2016/09/23/computer_science/data_structure/introduction/"/>
      <url>/2016/09/23/computer_science/data_structure/introduction/</url>
      
        <content type="html"><![CDATA[<p>对常见数据结构的一个简单地总结</p><hr><a id="more"></a><h2 id="1-数据结构定义"><a href="#1-数据结构定义" class="headerlink" title="1. 数据结构定义"></a>1. 数据结构定义</h2><p>数据结构是指<strong>相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成</strong>，记为：</p><center>$Data Structure = (D, R)$</center>其中$D$是数据元素的集合，$R$是$D$中元素之间的关系的集合。  <p>通俗的理解，<strong>数据结构=逻辑结构(线性、非线性) + 存储结构(顺序、链式、索引、散列)</strong></p><ul><li>逻辑结构：数据元素间抽象化的相互关系</li><li>存储结构：数据在计算机中的存储形式，也是物理结构</li></ul><hr><h2 id="2-逻辑结构"><a href="#2-逻辑结构" class="headerlink" title="2. 逻辑结构"></a>2. 逻辑结构</h2><p>数据的逻辑结构是指数据之间的逻辑关系，比如一对一、一对多、多对一、多对多等。通常，逻辑关系可以分为两种：线性关系和非线性关系。线性关系指：<strong>除第一个外，每个元素有且只有一个前驱；除最后一个元素外，每个元素有且只有一个后继</strong>。</p><p>常见的逻辑结构有以下几种：</p><ul><li><strong>集合</strong>：数据元素间没有任何关系</li><li><strong>线性结构</strong>：数据元素间存在线性关系</li><li><strong>树</strong>：数据元素间有层次关系</li><li><strong>图</strong>：数据元素间you网状关系</li></ul><p><strong>常见的线性结构</strong>：线性表、栈、队列、双队列、数组、串等<br><strong>常见的非线性结构</strong>：多维数组、树、图、广义表等</p><hr><h2 id="3-存储结构"><a href="#3-存储结构" class="headerlink" title="3. 存储结构"></a>3. 存储结构</h2><p>数据的存储结构是指数据在计算机中的存储形式，也是数据的物理结构。</p><p>常见的存储结构有以下几种：</p><ol><li><strong>顺序存储</strong>：逻辑上相邻的节点存储在物理位置上相邻的存储单元中，节点之间的逻辑关系由存储单元的邻接关系体现<ul><li>优点：可实现对节点的随机存取</li><li>缺点：不便于插入、删除，因为要大量移动数据</li></ul></li><li><strong>链式存储</strong>：逻辑上相邻的节点在物理存储上不相邻，而是通过指针等体现逻辑关系<ul><li>优点：便于插入、删除，存储密度比顺序存储小</li><li>缺点：不便于查找</li></ul></li><li><strong>索引存储</strong>：通过建立索引表来标识节点的地址</li><li><strong>散列存储</strong>：根据节点的关键字直接计算出节点的存储地址</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction To Computer</title>
      <link href="/2014/02/23/computer_science/computer_basic/introduction/"/>
      <url>/2014/02/23/computer_science/computer_basic/introduction/</url>
      
        <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/30823911/" target="_blank" rel="noopener">《计算机组装与维修技术》</a>阅读笔记</p><a id="more"></a><hr><h2 id="1-计算机及其组成"><a href="#1-计算机及其组成" class="headerlink" title="1.计算机及其组成"></a>1.计算机及其组成</h2><h3 id="什么是计算机"><a href="#什么是计算机" class="headerlink" title="什么是计算机"></a>什么是计算机</h3><p>计算机全称电子计算机，俗称电脑、PC等，是一种用于计算的机器，其种类繁多，包括个人计算机、高性能计算机、服务器等。</p><h3 id="计算机的组成"><a href="#计算机的组成" class="headerlink" title="计算机的组成"></a>计算机的组成</h3><p>一个完整的可正常工作的计算机包括硬件和软件两个部分：</p><h5 id="1-计算机硬件"><a href="#1-计算机硬件" class="headerlink" title="1. 计算机硬件"></a>1. 计算机硬件</h5><p>硬件是指组成计算机的实体部件，从外观上来看硬件包括：主机、显示器、键盘、鼠标、音响、打印机、扫描仪等，其中主机使整个计算机最重要的组件，一般的，主机都包括:</p><ul><li>CPU：Central Processing Uint，计算机核心的核心，目前CPU的生产厂商有Intel和AMD两家公司，市场占比大约82开</li><li>主板：承担着操控和协调CPU、声卡、显卡等部件的任务</li><li>显卡</li><li>风扇</li><li>电源</li><li>网卡</li><li>声卡</li></ul><h5 id="2-计算机软件"><a href="#2-计算机软件" class="headerlink" title="2. 计算机软件"></a>2. 计算机软件</h5><p>软件是指在硬件上运行的各种程序，例如聊天软件、游戏软件，其中操作系统也是软件的一种，例如Unbuntu、Windows等</p><hr><h2 id="2-CPU"><a href="#2-CPU" class="headerlink" title="2. CPU"></a>2. CPU</h2><p>CPU作为计算机的核心，其性能指标包括以下几种：</p><ol><li><strong>主频</strong>：即CPU的时钟频率，单位为MHz或GHz，标示CPU的运算速度，CPU的主频=外频x倍频</li><li><strong>外频</strong>：CPU的总线频率，是由主板为CPU提供的基准时钟频率，单位为MHz，外频决定了主板的运行速度。通常我们在台机中所说的超频，就是指超CPU的外频，大部分CPU外频和主板频率是同步运行的，如果改变外频可能会导致系统不稳定</li><li><strong>倍频</strong>：CPU主频和外频之间的倍率，一般情况下CPU的倍频是锁定的，有的CPU可以调节倍频</li><li><strong>前端总线频率</strong>：也称FSB带宽，是CPU与内存间的数据交换的速率，一般数据带宽=(总线频率x数据位宽)/8</li><li><strong>缓存</strong>：由于CPU和内存处理数据速度不一致，因而引入了缓存，一般而言CPU中有2～3级缓存，L1 Cache是一级缓存，由SRAM组成</li></ol><hr><h2 id="3-主板"><a href="#3-主板" class="headerlink" title="3. 主板"></a>3. 主板</h2><p>主板是一块印刷电路板PCB，一般采用4或6层板，4层板包括主板信号层、接地层、电源层、次信号层，6层板多了辅助电源层和中信号层，6层的抗电磁干扰能力更强。<br>一般主板有如下几个组件：</p><ol><li><strong>芯片组</strong>：芯片组主要由BIOS芯片、南北桥芯片、磁盘阵列RAID、控制芯片等组成<ul><li><strong>BIOS芯片</strong>：BIOS芯片是一块方块型的存储器，里面存有与该主板搭配的基本输入输出系统程序，改程序能够让主板识别各种硬件，以及设置引导系统、调整CPU外频等，BIOS芯片是可写入的。</li><li><strong>南北桥</strong>：横跨AGP插槽左右两侧的两块芯片就是南北桥芯片。南桥芯片多位于PCI插槽的上方；而CPU插槽旁边，被散热片盖住的则是北桥芯片，一般而言主板的命名都是以北桥的核心名称命名的。北桥芯片主要负责处理CPU、内存、显卡三者之间的交互；南桥负责硬盘等存储设备和PCI之间的数据流通。南北桥合称芯片组。现代的一些高端主机会将南北桥芯片封装到一起。</li><li><strong>RAID</strong>：控制芯片</li></ul></li><li>总线：总线是主板的重要组成部分，各个部件通过插槽连接到总线上，通常包括：CPU插槽、内存插槽、AGP插槽(用于插AGP显卡，目前逐渐被PCI Express插槽取缔)、PCI插槽(插声卡、网卡等)、CNR插槽(插CNR接口的软Modem或网卡)</li><li>对外接口：硬盘接口(一般都是SATA接口)、软驱接口、COM接口(连接串行鼠标和外置Modem等)、PS/2接口(仅用于连接键鼠，目前逐渐被USB接口取代)、USB接口、LPT接口(连接打印机或扫描仪)、MIDI接口(声卡和游戏杆，目前逐渐淘汰)。</li></ol><hr><h2 id="4-内存"><a href="#4-内存" class="headerlink" title="4. 内存"></a>4. 内存</h2><p>内存是有内存芯片、电路板、金手指(即内存条边缘的一排金黄色导电触片)等组成，当计算机运行时，CPU就会把运行所需的数据从硬盘中调到内存中，运算完成后再传出，目前市面上流行的内存类型为DDR3和DDR4，DDR即双倍速率同步动态随机存储器Double Data Rate Synchronous Dynamic Random Access Memory的简称，DDR在每个时钟的上升沿和下降沿各传输一次数据</p><h5 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h5><ul><li><strong>内存主频</strong>：内存的运行速度</li><li>内存容量</li><li>CAS延迟：内存读写数据所需的时延</li></ul><hr><h2 id="5-显卡"><a href="#5-显卡" class="headerlink" title="5. 显卡"></a>5. 显卡</h2><p>显卡即显示接口卡、显示适配器、显示器配置卡，承担输出图形显示的重要任务。由于显卡的特性，它特别适合处理矩阵运算，因此显卡在现代机器学习中扮演了重要的角色。在机器学习中通常会有大量的矩阵操作，所以可以将这部分操作送给显卡中的GPU去操作。显卡一般分为两种</p><ul><li><strong>集成显卡</strong>：即芯片组中集成了显卡，这样的芯片组也称为整合型芯片，集显一般没有显存，而是使用内存作为其显存，因此其性能和独显相比较差</li><li><strong>独立显卡</strong>：显卡成独立的板卡，通常有自己的显存</li></ul><p>显卡的基本结构如下：</p><ul><li><strong>GPU</strong>:图形处理芯片</li><li><strong>显存</strong></li><li><strong>显卡BIOS</strong>:驱动程序之间的控制程序,存有显卡的型号、规格、生产厂家及出场时间等</li><li>输出接口</li><li>显卡PCB板</li></ul><h5 id="性能指标-1"><a href="#性能指标-1" class="headerlink" title="性能指标"></a>性能指标</h5><ul><li><strong>显卡频率</strong>：显卡的工作频率，通常越高越好</li><li><strong>显存位宽</strong>：一个时钟周期内所能传送数据的位数，市场上主流的有128位、256位、320位等</li><li>显存在显卡上工作时的频率</li><li>显存容量：主流的是256MB和512MB</li><li>3D API：显卡与应用程序之间的接口</li></ul><hr><h2 id="6-声卡"><a href="#6-声卡" class="headerlink" title="6. 声卡"></a>6. 声卡</h2><p>声卡是实现模拟信号/数字信号相互转换的一种硬件，一般分为板卡式(目前已被淘汰)、集成式(主流)和外置式三种，声卡的基本构成有：</p><ul><li><strong>声音控制芯片</strong>：可通过数模转换器将模拟信号转换成数字信号，或反过来</li><li><strong>DSP</strong>：执行和声音处理有关的命令、执行压缩解压缩程序、增加特殊声效和传真Modem等，高档声卡一般配有DSP</li><li><strong>CODEC</strong>：编解码器</li><li>输入输出接口</li><li>跳线：用于设置声卡的硬件设备，包括CD-ROM的I/O地址、声卡的I/O地址设置。</li></ul><h5 id="性能指标-2"><a href="#性能指标-2" class="headerlink" title="性能指标"></a>性能指标</h5><ul><li><strong>采样频率</strong>：每秒从连续信号中采样出离散信号的个数，单位Hz。通俗地讲是指计算机美妙采集多少个声音样本</li><li><strong>采样位数</strong>：即采样值或取样值，用来衡量声音波动变化的参数，含义是声卡在采集和播放声音文件时所使用数字声音信号的二进制位数</li><li><strong>信噪比SNR</strong>：放大器的输出信号的电压与同时输出的噪声电压的比例，单位分贝，一般信噪比越高，说明信号李的噪声越小，声音质量越高</li><li>频率响应：系统或计量传感器的阻抗随频率的变化</li></ul><hr><h2 id="7-硬盘"><a href="#7-硬盘" class="headerlink" title="7. 硬盘"></a>7. 硬盘</h2><p>硬盘是计算机中的存储器件，一般的机械硬盘由一个或多个铝制或玻璃制的碟片组成，碟片外覆盖有铁磁性材料。传统的机械硬盘其内部构造包括：</p><ul><li>磁头：负责对磁盘进行读写，与磁盘表面的磁性物质发生作用，一般有MR磁头和GMR磁头，硬盘里的磁头数=磁盘盘体数x2</li><li>盘体：存储数据的主体，有一或多个盘片叠在一起组成，盘体有以下几个概念：<ul><li><strong>磁道</strong>：一个盘片的一个面上的一个同心圆成为一个磁道，一般内侧磁道和外侧磁道存储量不同</li><li><strong>扇区</strong>：每个磁道都被分为若干个弧段，这些弧段就是扇区，每个扇区可以存放512字节的信息，磁盘读写数据以扇区为单位</li><li><strong>柱面</strong>：每个盘面上相同位置的磁道组成一个柱面，<strong>硬盘容量=柱面数x磁头数x扇区数x512B</strong></li></ul></li><li>主轴电机：用于驱动盘体转动的设备，主流的为7200转/分钟</li><li>寻道电机、驱动臂：寻道电机带动磁头在盘体上寻道，驱动臂把磁头和寻道电机连接在一起</li></ul><h5 id="性能指标-3"><a href="#性能指标-3" class="headerlink" title="性能指标"></a>性能指标</h5><ul><li>容量</li><li><strong>转速</strong>：单位为转/分钟或RPM，转的越快，其传输率越高，发热量越大</li><li><strong>平均访问时间</strong>：磁头从起始位置找到需要读写的数据位置的时间，体现了硬盘的读写速度。一般包括了平均寻道时间和平均等待时间，平均寻道时间是指磁头移动到指定磁道所需的时间，平均等待时间磁头已经在目标磁道，等待所需访问的扇区转至磁头下方所需时间</li><li><strong>传输速率</strong>：包括内部传输速率和外部传输速率，内部传输速率指未用硬盘缓冲区时的性能，外部传输速率是系统总线与硬盘缓冲区之间的传输速率</li><li><strong>缓存</strong>：硬盘也有缓存，是硬盘控制器上的一块内存芯片</li></ul><p>固态硬盘SSD是一种新型的硬盘，由固态电子存储芯片阵列组成，其存储介质一般有闪存(FLASH)和DRAM两种，和传统硬盘比，SSD有读写速度快、低功耗、无噪声、体积小等优点，也有造价高、使用寿命短的缺点。关于SSD的使用寿命，也就是SSD擦写次数限制，闪存完全擦写一次叫做一次P/E，因此闪存的寿命以P/E为单位，一般34nm的闪存寿命为5000P/E，25nm的为3000P/E。不过由于SSD固件算法升级，SSD能提供更少的不必要写入量。 举个例子，一款128G的SSD，要写入128G的文件才算做一次P/E，即使每天写入50G的内容，2.5天才能完成一次P/E，一年也才用去150次左右的P/E，一块3000P/E的SSD够用200年了。</p><hr><h2 id="8-BIOS和CMOS"><a href="#8-BIOS和CMOS" class="headerlink" title="8. BIOS和CMOS"></a>8. BIOS和CMOS</h2><p>BIOS是基本输入输出系统。启动计算机时，CPU首先根据集成在主板、显卡等设备上的BIOS芯片来核对每个基础设备是否正常，然后从硬盘中拷贝操作系统到内存中。BIOS有3个基本功能：</p><ul><li>自检及初始化：开机后BIOS最先被启动，然后BIOS会检查计算机硬件设备，若设备正常才会启动操作系统</li><li>程序服务：BIOS直接与计算机的I/O设备交互，实现软件程序对硬件的直接操作</li><li>设定中断</li></ul><p>CMOS是指互补金属氧化物半导体，是计算机主板上的一块可读写的RAM芯片，用来保存当前系统的硬件配置和用户对某些参数的设定。CMOS由主板的可充电电池供电，即使系统断电CMOS中的信息也不会丢失。 通常计算机中的开机密码存储在CMOS中，当忘记密码时，可以抠下主板上的电池，将CMOS放电，放电后CMOS内容会被清空，因而密码也会被清除。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
          <category> Computer Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
